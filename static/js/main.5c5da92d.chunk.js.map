{"version":3,"sources":["app/mods/modsService.ts","app/components.tsx","app/Header.tsx","app/Footer.tsx","app/Home.tsx","app/mods/Mods.tsx","app/App.tsx","serviceWorker.ts","index.tsx"],"names":["getJson","path","a","fetch","process","response","ok","json","statusText","getMods","InternalLink","props","href","children","history","useHistory","onClick","push","NavLink","component","ModsDropdown","useQuery","data","isLoading","error","NavDropdown","id","title","Item","Divider","ItemText","hidden","style","fontSize","mods","map","mod","key","name","Header","Navbar","bg","expand","Brand","Toggle","aria-controls","Collapse","Nav","className","Link","Footer","Home","ModList","m","Mod","match","params","getModDetail","console","log","useEffect","document","Mods","useRouteMatch","exact","App","Container","Boolean","window","location","hostname","ReactDOM","render","StrictMode","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","message"],"mappings":"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","file":"static/js/main.5c5da92d.chunk.js","sourcesContent":["export interface ModInfo {\r\n    id: string;\r\n    name: string;\r\n}\r\n\r\nexport interface ModInfoFile {\r\n    mods: ModInfo[];\r\n}\r\n\r\nexport interface ModDetail extends ModInfo {\r\n    repo: string;\r\n    link: string;\r\n}\r\n\r\nconst { PUBLIC_URL } = process.env;\r\n\r\nasync function getJson<T>(path: string): Promise<T> {\r\n    const response = await fetch(PUBLIC_URL + path);\r\n    if (response.ok) {\r\n        return (await response.json()) as T;\r\n    }\r\n    throw response.statusText;\r\n}\r\n\r\nexport async function getMods(): Promise<ModInfoFile> {\r\n    return await getJson<ModInfoFile>(\"/mods.json\");\r\n}\r\n\r\nexport function getModDetail(id: string): () => Promise<ModDetail> {\r\n    return async () => {\r\n        return await getJson<ModDetail>(`/mods/${id}.json`);\r\n    };\r\n}\r\n","// eslint-disable-next-line\nimport React from \"react\";\nimport { useHistory } from \"react-router-dom\";\n\nexport function InternalLink(props: { href: string; children: any }) {\n    const { href, children } = props;\n\n    const history = useHistory();\n\n    const onClick = () => {\n        history.push(href);\n    };\n\n    return <span onClick={onClick}>{children}</span>;\n}\n","// eslint-disable-next-line\nimport React from \"react\";\nimport Navbar from \"react-bootstrap/Navbar\";\nimport Nav from \"react-bootstrap/Nav\";\nimport NavDropdown from \"react-bootstrap/NavDropdown\";\nimport { getMods } from \"./mods/modsService\";\nimport { useQuery } from \"react-query\";\nimport { InternalLink } from \"./components\";\n\nconst { PUBLIC_URL } = process.env;\n\nfunction NavLink(props: { href: string; component: any; children: any }) {\n    return (\n        <props.component>\n            <InternalLink href={props.href}>{props.children}</InternalLink>\n        </props.component>\n    );\n}\n\nfunction ModsDropdown() {\n    const { data, isLoading, error } = useQuery(\"mods\", getMods);\n\n    return (\n        <NavDropdown id=\"mods-dropdown\" title=\"Mods\">\n            <NavLink href={PUBLIC_URL + \"/mods\"} component={NavDropdown.Item}>\n                Overview\n            </NavLink>\n            <NavDropdown.Divider />\n            <NavDropdown.ItemText hidden={!isLoading}>\n                Loading...\n            </NavDropdown.ItemText>\n            <NavDropdown.ItemText hidden={isLoading || !error}>\n                Error!\n                <span style={{ fontSize: \"8pt\" }}>(see console)</span>\n            </NavDropdown.ItemText>\n            {data?.mods?.map((mod) => (\n                <NavLink\n                    key={mod.id}\n                    href={`${PUBLIC_URL}/mods/${mod.id}`}\n                    component={NavDropdown.Item}\n                >\n                    {mod.name}\n                </NavLink>\n            ))}\n        </NavDropdown>\n    );\n}\n\nfunction Header() {\n    return (\n        <Navbar bg=\"light\" expand=\"lg\">\n            <Navbar.Brand>MineLittlePony</Navbar.Brand>\n            <Navbar.Toggle aria-controls=\"basic-navbar-nav\" />\n            <Navbar.Collapse id=\"basic-navbar-nav\">\n                <Nav className=\"mr-auto\">\n                    <NavLink href={PUBLIC_URL + \"/\"} component={Nav.Link}>\n                        Home\n                    </NavLink>\n                    <ModsDropdown />\n                    <NavLink\n                        href={PUBLIC_URL + \"/support\"}\n                        component={Nav.Link}\n                    >\n                        Support\n                    </NavLink>\n                </Nav>\n            </Navbar.Collapse>\n        </Navbar>\n    );\n}\n\nexport default Header;\n","// eslint-disable-next-line\r\nimport React from \"react\";\r\n\r\nfunction Footer() {\r\n    return (\r\n        <footer id=\"footer\">\r\n            <span>Site Design &copy; minelittlepony-mod.com</span>\r\n            <span>Minecraft &copy; Mojang AB</span>\r\n            <span>My Little Pony: Friendship is Magic &copy; Hasbro, Inc.</span>\r\n        </footer>\r\n    );\r\n}\r\n\r\nexport default Footer;\r\n","// eslint-disable-next-line\r\nimport React from \"react\";\r\n\r\nfunction Home() {\r\n    return (\r\n        <div>\r\n            <p>Hello</p>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Home;\r\n","// eslint-disable-next-line\nimport React, { useEffect } from \"react\";\nimport { Switch, Route, useRouteMatch } from \"react-router-dom\";\nimport { useQuery } from \"react-query\";\nimport { getMods, getModDetail } from \"./modsService\";\nimport { InternalLink } from \"../components\";\n\nconst { PUBLIC_URL } = process.env;\n\nfunction ModList() {\n    const { data, isLoading, error } = useQuery(\"mods\", getMods);\n\n    return (\n        <div>\n            <div hidden={!isLoading}>Loading...</div>\n            <div hidden={isLoading || !error}>\n                Error! <span style={{ fontSize: \"8pt\" }}>See console</span>\n            </div>\n            {data?.mods.map((m) => (\n                <div key={m.name}>\n                    <InternalLink href={`${PUBLIC_URL}/mods/${m.id}`}>\n                        {m.name}\n                    </InternalLink>\n                </div>\n            ))}\n        </div>\n    );\n}\n\nfunction Mod(props: { match: any }) {\n    const { id } = props.match.params;\n    const { data, isLoading, error } = useQuery(\"mod-\" + id, getModDetail(id));\n\n    console.log(data);\n\n    useEffect(() => {\n        document.title = \"MineLittlePony - Mods\";\n    });\n\n    return (\n        <>\n            <div hidden={!isLoading}>Loading...</div>\n            <div hidden={isLoading || !error}>Error! Does the mod exist?</div>\n            <div hidden={!data}>{data?.name}</div>\n        </>\n    );\n}\n\nfunction Mods() {\n    const { path } = useRouteMatch();\n    return (\n        <Switch>\n            <Route exact path={path + \"/\"} component={ModList} />\n            <Route exact path={path + \"/:id\"} component={Mod} />\n        </Switch>\n    );\n}\n\nexport default Mods;\n","// eslint-disable-next-line\nimport React from \"react\";\nimport { Route, BrowserRouter, Switch } from \"react-router-dom\";\nimport \"bootstrap/dist/css/bootstrap.min.css\";\n\nimport Container from \"react-bootstrap/Container\";\n\nimport \"./App.css\";\n\nimport Header from \"./Header\";\nimport Footer from \"./Footer\";\nimport Home from \"./Home\";\nimport Mods from \"./mods/Mods\";\n\nconst { PUBLIC_URL } = process.env;\n\nfunction App() {\n    return (\n        <div className=\"App\">\n            <BrowserRouter>\n                <Header />\n                <Container id=\"content\">\n                    <Switch>\n                        <Route path={PUBLIC_URL + \"/\"} exact component={Home} />\n                        <Route path={PUBLIC_URL + \"/mods\"} component={Mods} />\n                    </Switch>\n                </Container>\n                <Footer />\n            </BrowserRouter>\n        </div>\n    );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n    window.location.hostname === \"localhost\" ||\r\n        // [::1] is the IPv6 localhost address.\r\n        window.location.hostname === \"[::1]\" ||\r\n        // 127.0.0.0/8 are considered localhost for IPv4.\r\n        window.location.hostname.match(\r\n            /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n        )\r\n);\r\n\r\ntype Config = {\r\n    onSuccess?: (registration: ServiceWorkerRegistration) => void;\r\n    onUpdate?: (registration: ServiceWorkerRegistration) => void;\r\n};\r\n\r\nexport function register(config?: Config) {\r\n    if (process.env.NODE_ENV === \"production\" && \"serviceWorker\" in navigator) {\r\n        // The URL constructor is available in all browsers that support SW.\r\n        const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n        if (publicUrl.origin !== window.location.origin) {\r\n            // Our service worker won't work if PUBLIC_URL is on a different origin\r\n            // from what our page is served on. This might happen if a CDN is used to\r\n            // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n            return;\r\n        }\r\n\r\n        window.addEventListener(\"load\", () => {\r\n            const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n            if (isLocalhost) {\r\n                // This is running on localhost. Let's check if a service worker still exists or not.\r\n                checkValidServiceWorker(swUrl, config);\r\n\r\n                // Add some additional logging to localhost, pointing developers to the\r\n                // service worker/PWA documentation.\r\n                navigator.serviceWorker.ready.then(() => {\r\n                    console.log(\r\n                        \"This web app is being served cache-first by a service \" +\r\n                            \"worker. To learn more, visit https://bit.ly/CRA-PWA\"\r\n                    );\r\n                });\r\n            } else {\r\n                // Is not localhost. Just register service worker\r\n                registerValidSW(swUrl, config);\r\n            }\r\n        });\r\n    }\r\n}\r\n\r\nfunction registerValidSW(swUrl: string, config?: Config) {\r\n    navigator.serviceWorker\r\n        .register(swUrl)\r\n        .then((registration) => {\r\n            registration.onupdatefound = () => {\r\n                const installingWorker = registration.installing;\r\n                if (installingWorker == null) {\r\n                    return;\r\n                }\r\n                installingWorker.onstatechange = () => {\r\n                    if (installingWorker.state === \"installed\") {\r\n                        if (navigator.serviceWorker.controller) {\r\n                            // At this point, the updated precached content has been fetched,\r\n                            // but the previous service worker will still serve the older\r\n                            // content until all client tabs are closed.\r\n                            console.log(\r\n                                \"New content is available and will be used when all \" +\r\n                                    \"tabs for this page are closed. See https://bit.ly/CRA-PWA.\"\r\n                            );\r\n\r\n                            // Execute callback\r\n                            if (config && config.onUpdate) {\r\n                                config.onUpdate(registration);\r\n                            }\r\n                        } else {\r\n                            // At this point, everything has been precached.\r\n                            // It's the perfect time to display a\r\n                            // \"Content is cached for offline use.\" message.\r\n                            console.log(\"Content is cached for offline use.\");\r\n\r\n                            // Execute callback\r\n                            if (config && config.onSuccess) {\r\n                                config.onSuccess(registration);\r\n                            }\r\n                        }\r\n                    }\r\n                };\r\n            };\r\n        })\r\n        .catch((error) => {\r\n            console.error(\"Error during service worker registration:\", error);\r\n        });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\r\n    // Check if the service worker can be found. If it can't reload the page.\r\n    fetch(swUrl, {\r\n        headers: { \"Service-Worker\": \"script\" },\r\n    })\r\n        .then((response) => {\r\n            // Ensure service worker exists, and that we really are getting a JS file.\r\n            const contentType = response.headers.get(\"content-type\");\r\n            if (\r\n                response.status === 404 ||\r\n                (contentType != null &&\r\n                    contentType.indexOf(\"javascript\") === -1)\r\n            ) {\r\n                // No service worker found. Probably a different app. Reload the page.\r\n                navigator.serviceWorker.ready.then((registration) => {\r\n                    registration.unregister().then(() => {\r\n                        window.location.reload();\r\n                    });\r\n                });\r\n            } else {\r\n                // Service worker found. Proceed as normal.\r\n                registerValidSW(swUrl, config);\r\n            }\r\n        })\r\n        .catch(() => {\r\n            console.log(\r\n                \"No internet connection found. App is running in offline mode.\"\r\n            );\r\n        });\r\n}\r\n\r\nexport function unregister() {\r\n    if (\"serviceWorker\" in navigator) {\r\n        navigator.serviceWorker.ready\r\n            .then((registration) => {\r\n                registration.unregister();\r\n            })\r\n            .catch((error) => {\r\n                console.error(error.message);\r\n            });\r\n    }\r\n}\r\n","// eslint-disable-next-line\r\nimport React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport \"./index.css\";\r\nimport App from \"./app/App\";\r\nimport * as serviceWorker from \"./serviceWorker\";\r\n\r\nReactDOM.render(\r\n    <React.StrictMode>\r\n        <App />\r\n    </React.StrictMode>,\r\n    document.getElementById(\"root\")\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}