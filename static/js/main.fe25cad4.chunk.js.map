{"version":3,"sources":["app/mods/modsService.ts","app/Header.tsx","app/Footer.tsx","app/Home.tsx","app/mods/Mods.tsx","app/App.tsx","serviceWorker.ts","index.tsx"],"names":["getJson","path","a","fetch","process","response","ok","json","statusText","getMods","Header","useQuery","data","isLoading","error","Navbar","bg","expand","Brand","href","Toggle","aria-controls","Collapse","id","Nav","className","Link","NavDropdown","title","Item","Divider","ItemText","hidden","style","fontSize","mods","map","mod","key","name","Footer","Home","ModList","m","Mod","props","match","params","getModDetail","console","log","useEffect","document","Mods","useRouteMatch","exact","component","App","Container","location","Boolean","window","hostname","ReactDOM","render","StrictMode","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","message"],"mappings":"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","file":"static/js/main.fe25cad4.chunk.js","sourcesContent":["export interface ModInfo {\r\n    id: string;\r\n    name: string;\r\n}\r\n\r\nexport interface ModInfoFile {\r\n    mods: ModInfo[];\r\n}\r\n\r\nexport interface ModDetail extends ModInfo {\r\n    repo: string;\r\n    link: string;\r\n}\r\n\r\nconst { PUBLIC_URL } = process.env;\r\n\r\nasync function getJson<T>(path: string): Promise<T> {\r\n    const response = await fetch(PUBLIC_URL + path);\r\n    if (response.ok) {\r\n        return (await response.json()) as T;\r\n    }\r\n    throw response.statusText;\r\n}\r\n\r\nexport async function getMods(): Promise<ModInfoFile> {\r\n    return await getJson<ModInfoFile>(\"/mods.json\");\r\n}\r\n\r\nexport function getModDetail(id: string): () => Promise<ModDetail> {\r\n    return async () => {\r\n        return await getJson<ModDetail>(`/mods/${id}.json`);\r\n    };\r\n}\r\n","// eslint-disable-next-line\r\nimport React from \"react\";\r\nimport Navbar from \"react-bootstrap/Navbar\";\r\nimport Nav from \"react-bootstrap/Nav\";\r\nimport NavDropdown from \"react-bootstrap/NavDropdown\";\r\nimport { getMods } from \"./mods/modsService\";\r\nimport { useQuery } from \"react-query\";\r\n\r\nconst { PUBLIC_URL } = process.env;\r\n\r\nfunction Header() {\r\n    const { data, isLoading, error } = useQuery(\"mods\", getMods);\r\n\r\n    return (\r\n        <Navbar bg=\"light\" expand=\"lg\">\r\n            <Navbar.Brand href={PUBLIC_URL + \"/\"}>MineLittlePony</Navbar.Brand>\r\n            <Navbar.Toggle aria-controls=\"basic-navbar-nav\" />\r\n            <Navbar.Collapse id=\"basic-navbar-nav\">\r\n                <Nav className=\"mr-auto\">\r\n                    <Nav.Link href={PUBLIC_URL + \"/\"}>Home</Nav.Link>\r\n                    <NavDropdown id=\"mods-dropdown\" title=\"Mods\">\r\n                        <NavDropdown.Item href={PUBLIC_URL + \"/mods\"}>\r\n                            Overview\r\n                        </NavDropdown.Item>\r\n                        <NavDropdown.Divider />\r\n                        <NavDropdown.ItemText hidden={!isLoading}>\r\n                            Loading...\r\n                        </NavDropdown.ItemText>\r\n                        <NavDropdown.ItemText hidden={isLoading || !error}>\r\n                            Error!\r\n                            <span style={{ fontSize: \"8pt\" }}>\r\n                                (see console)\r\n                            </span>\r\n                        </NavDropdown.ItemText>\r\n                        {data?.mods?.map((mod) => (\r\n                            <NavDropdown.Item\r\n                                key={mod.id}\r\n                                href={`${PUBLIC_URL}/mods/${mod.id}`}\r\n                            >\r\n                                {mod.name}\r\n                            </NavDropdown.Item>\r\n                        ))}\r\n                    </NavDropdown>\r\n                    <Nav.Link href={PUBLIC_URL + \"/support\"}>Support</Nav.Link>\r\n                </Nav>\r\n            </Navbar.Collapse>\r\n        </Navbar>\r\n    );\r\n}\r\n\r\nexport default Header;\r\n","// eslint-disable-next-line\r\nimport React from \"react\";\r\n\r\nfunction Footer() {\r\n    return (\r\n        <footer id=\"footer\">\r\n            <span>Site Design &copy; minelittlepony-mod.com</span>\r\n            <span>Minecraft &copy; Mojang AB</span>\r\n            <span>My Little Pony: Friendship is Magic &copy; Hasbro, Inc.</span>\r\n        </footer>\r\n    );\r\n}\r\n\r\nexport default Footer;\r\n","// eslint-disable-next-line\r\nimport React from \"react\";\r\n\r\nfunction Home() {\r\n    return (\r\n        <div>\r\n            <p>Hello</p>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Home;\r\n","// eslint-disable-next-line\r\nimport React, { useEffect } from \"react\";\r\nimport { Switch, Route, useRouteMatch } from \"react-router-dom\";\r\nimport { useQuery } from \"react-query\";\r\nimport { getMods, getModDetail } from \"./modsService\";\r\n\r\nconst { PUBLIC_URL } = process.env;\r\n\r\nfunction ModList() {\r\n    const { data, isLoading, error } = useQuery(\"mods\", getMods);\r\n\r\n    return (\r\n        <div>\r\n            <div hidden={!isLoading}>Loading...</div>\r\n            <div hidden={isLoading || !error}>\r\n                Error! <span style={{ fontSize: \"8pt\" }}>See console</span>\r\n            </div>\r\n            {data?.mods.map((m) => (\r\n                <div key={m.name}>\r\n                    <a href={`${PUBLIC_URL}/mods/${m.id}`}>{m.name}</a>\r\n                </div>\r\n            ))}\r\n        </div>\r\n    );\r\n}\r\n\r\nfunction Mod(props: { match: any }) {\r\n    const { id } = props.match.params;\r\n    const { data, isLoading, error } = useQuery(\"mod-\" + id, getModDetail(id));\r\n\r\n    console.log(data);\r\n\r\n    useEffect(() => {\r\n        document.title = \"MineLittlePony - Mods\";\r\n    });\r\n\r\n    return (\r\n        <>\r\n            <div hidden={!isLoading}>Loading...</div>\r\n            <div hidden={isLoading || !error}>Error! Does the mod exist?</div>\r\n            <div hidden={!data}>{data?.name}</div>\r\n        </>\r\n    );\r\n}\r\n\r\nfunction Mods() {\r\n    const { path } = useRouteMatch();\r\n    return (\r\n        <Switch>\r\n            <Route exact path={path} component={ModList} />\r\n            <Route exact path={`${path}/:id`} component={Mod} />\r\n        </Switch>\r\n    );\r\n}\r\n\r\nexport default Mods;\r\n","// eslint-disable-next-line\nimport React from \"react\";\nimport { Route, BrowserRouter, Switch } from \"react-router-dom\";\nimport \"bootstrap/dist/css/bootstrap.min.css\";\n\nimport Container from \"react-bootstrap/Container\";\n\nimport \"./App.css\";\n\nimport Header from \"./Header\";\nimport Footer from \"./Footer\";\nimport Home from \"./Home\";\nimport Mods from \"./mods/Mods\";\n\nconst { PUBLIC_URL } = process.env;\n\nfunction App() {\n    return (\n        <div className=\"App\">\n            <BrowserRouter>\n                <Header />\n                <Container id=\"content\">\n                    <p>{document.location.href}</p>\n                    <Switch>\n                        <Route path={PUBLIC_URL} exact component={Home} />\n                        <Route path={PUBLIC_URL + \"/mods\"} component={Mods} />\n                    </Switch>\n                </Container>\n                <Footer />\n            </BrowserRouter>\n        </div>\n    );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n    window.location.hostname === \"localhost\" ||\r\n        // [::1] is the IPv6 localhost address.\r\n        window.location.hostname === \"[::1]\" ||\r\n        // 127.0.0.0/8 are considered localhost for IPv4.\r\n        window.location.hostname.match(\r\n            /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n        )\r\n);\r\n\r\ntype Config = {\r\n    onSuccess?: (registration: ServiceWorkerRegistration) => void;\r\n    onUpdate?: (registration: ServiceWorkerRegistration) => void;\r\n};\r\n\r\nexport function register(config?: Config) {\r\n    if (process.env.NODE_ENV === \"production\" && \"serviceWorker\" in navigator) {\r\n        // The URL constructor is available in all browsers that support SW.\r\n        const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n        if (publicUrl.origin !== window.location.origin) {\r\n            // Our service worker won't work if PUBLIC_URL is on a different origin\r\n            // from what our page is served on. This might happen if a CDN is used to\r\n            // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n            return;\r\n        }\r\n\r\n        window.addEventListener(\"load\", () => {\r\n            const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n            if (isLocalhost) {\r\n                // This is running on localhost. Let's check if a service worker still exists or not.\r\n                checkValidServiceWorker(swUrl, config);\r\n\r\n                // Add some additional logging to localhost, pointing developers to the\r\n                // service worker/PWA documentation.\r\n                navigator.serviceWorker.ready.then(() => {\r\n                    console.log(\r\n                        \"This web app is being served cache-first by a service \" +\r\n                            \"worker. To learn more, visit https://bit.ly/CRA-PWA\"\r\n                    );\r\n                });\r\n            } else {\r\n                // Is not localhost. Just register service worker\r\n                registerValidSW(swUrl, config);\r\n            }\r\n        });\r\n    }\r\n}\r\n\r\nfunction registerValidSW(swUrl: string, config?: Config) {\r\n    navigator.serviceWorker\r\n        .register(swUrl)\r\n        .then((registration) => {\r\n            registration.onupdatefound = () => {\r\n                const installingWorker = registration.installing;\r\n                if (installingWorker == null) {\r\n                    return;\r\n                }\r\n                installingWorker.onstatechange = () => {\r\n                    if (installingWorker.state === \"installed\") {\r\n                        if (navigator.serviceWorker.controller) {\r\n                            // At this point, the updated precached content has been fetched,\r\n                            // but the previous service worker will still serve the older\r\n                            // content until all client tabs are closed.\r\n                            console.log(\r\n                                \"New content is available and will be used when all \" +\r\n                                    \"tabs for this page are closed. See https://bit.ly/CRA-PWA.\"\r\n                            );\r\n\r\n                            // Execute callback\r\n                            if (config && config.onUpdate) {\r\n                                config.onUpdate(registration);\r\n                            }\r\n                        } else {\r\n                            // At this point, everything has been precached.\r\n                            // It's the perfect time to display a\r\n                            // \"Content is cached for offline use.\" message.\r\n                            console.log(\"Content is cached for offline use.\");\r\n\r\n                            // Execute callback\r\n                            if (config && config.onSuccess) {\r\n                                config.onSuccess(registration);\r\n                            }\r\n                        }\r\n                    }\r\n                };\r\n            };\r\n        })\r\n        .catch((error) => {\r\n            console.error(\"Error during service worker registration:\", error);\r\n        });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\r\n    // Check if the service worker can be found. If it can't reload the page.\r\n    fetch(swUrl, {\r\n        headers: { \"Service-Worker\": \"script\" },\r\n    })\r\n        .then((response) => {\r\n            // Ensure service worker exists, and that we really are getting a JS file.\r\n            const contentType = response.headers.get(\"content-type\");\r\n            if (\r\n                response.status === 404 ||\r\n                (contentType != null &&\r\n                    contentType.indexOf(\"javascript\") === -1)\r\n            ) {\r\n                // No service worker found. Probably a different app. Reload the page.\r\n                navigator.serviceWorker.ready.then((registration) => {\r\n                    registration.unregister().then(() => {\r\n                        window.location.reload();\r\n                    });\r\n                });\r\n            } else {\r\n                // Service worker found. Proceed as normal.\r\n                registerValidSW(swUrl, config);\r\n            }\r\n        })\r\n        .catch(() => {\r\n            console.log(\r\n                \"No internet connection found. App is running in offline mode.\"\r\n            );\r\n        });\r\n}\r\n\r\nexport function unregister() {\r\n    if (\"serviceWorker\" in navigator) {\r\n        navigator.serviceWorker.ready\r\n            .then((registration) => {\r\n                registration.unregister();\r\n            })\r\n            .catch((error) => {\r\n                console.error(error.message);\r\n            });\r\n    }\r\n}\r\n","// eslint-disable-next-line\r\nimport React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport \"./index.css\";\r\nimport App from \"./app/App\";\r\nimport * as serviceWorker from \"./serviceWorker\";\r\n\r\nReactDOM.render(\r\n    <React.StrictMode>\r\n        <App />\r\n    </React.StrictMode>,\r\n    document.getElementById(\"root\")\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}